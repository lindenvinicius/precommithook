#!/bin/bash

# Git pre-commit hook for Ruff (Python) + ESLint (JS/TS)
# Place this file in .git/hooks/pre-commit and make it executable with:
# chmod +x .git/hooks/pre-commit

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Running pre-commit linters (Ruff + ESLint)...${NC}"
echo "----------------------------------------"

# Repo root
ROOT_DIR=$(git rev-parse --show-toplevel)

# Where ESLint (eslint.config.* and node_modules) lives:
ESLINT_CWD="$ROOT_DIR"        # change to "$ROOT_DIR/frontend" if needed

################################
# Ruff (Python)
################################
if ! command -v ruff >/dev/null 2>&1; then
  echo -e "${RED}Error: Ruff is not installed!${NC}"
  echo "Install with: pip install ruff"
  exit 1
fi

echo -e "${YELLOW}Ruff: checking Python files...${NC}"
RUFF_OUTPUT=$(ruff check "$ROOT_DIR" 2>&1)
RUFF_EXIT_CODE=$?

if [ $RUFF_EXIT_CODE -eq 0 ]; then
  echo -e "${GREEN}✓ Ruff: no issues${NC}"
else
  echo -e "${RED}✗ Ruff: issues found${NC}"
  echo "======================================================"
  echo "$RUFF_OUTPUT"
  echo "======================================================"
  ISSUE_COUNT=$(echo "$RUFF_OUTPUT" | grep -c "^$ROOT_DIR")
  if [ $ISSUE_COUNT -gt 0 ]; then
    echo -e "${YELLOW}Total Ruff issues: $ISSUE_COUNT${NC}"
  fi
fi

################################
# ESLint (JS/TS) — root + subfolders
################################
if ! command -v node >/dev/null 2>&1 || ! command -v npm >/dev/null 2>&1; then
  echo -e "${RED}Error: Node.js and npm are required for ESLint.${NC}"
  exit 1
fi

echo -e "${YELLOW}ESLint: checking JS/TS across root and subfolders...${NC}"
pushd "$ESLINT_CWD" >/dev/null 2>&1

# Ensure ESLint is available (local devDependency preferred)
npx --no -- eslint -v >/dev/null 2>&1
ESLINT_AVAILABLE=$?
if [ $ESLINT_AVAILABLE -ne 0 ]; then
  echo -e "${RED}Error: ESLint not installed in this project.${NC}"
  echo "Install with: npm i -D eslint @eslint/js"
  echo "For TypeScript: npm i -D typescript typescript-eslint"
  popd >/dev/null 2>&1
  exit 1
fi

# Lint all JS/TS files in root + subfolders (no auto-fix). 
# --no-error-on-unmatched-pattern avoids failure if none exist.
# --no-warn-ignored avoids noise from ignored dirs (node_modules, dist, etc.)
ESLINT_OUTPUT=$(npx --no -- eslint "**/*.{js,jsx,ts,tsx}" \
  --format stylish \
  --no-error-on-unmatched-pattern \
  --no-warn-ignored 2>&1)
ESLINT_EXIT_CODE=$?

popd >/dev/null 2>&1

if [ $ESLINT_EXIT_CODE -eq 0 ]; then
  echo -e "${GREEN}✓ ESLint: no errors${NC}"
else
  echo -e "${RED}✗ ESLint: errors detected${NC}"
  echo "======================================================"
  echo "$ESLINT_OUTPUT"
  echo "======================================================"
  echo -e "${YELLOW}Tip:${NC} Fix the reported errors and commit again."
  # (Warnings do not fail; to fail on warnings too, add --max-warnings=0 above)
fi

################################
# Final decision
################################
if [ $RUFF_EXIT_CODE -eq 0 ] && [ $ESLINT_EXIT_CODE -eq 0 ]; then
  echo "----------------------------------------"
  echo -e "${GREEN}Pre-commit check passed successfully.${NC}"
  exit 0
else
  echo "----------------------------------------"
  echo -e "${RED}Commit aborted due to linting errors.${NC}"
  echo ""
  echo -e "${YELLOW}Options:${NC}"
  echo "1) Fix the issues and commit again"
  echo "2) For Python, try 'ruff check --fix .' and 'ruff format .' locally (not in hook)"
  echo "3) Use 'git commit --no-verify' to skip checks (not recommended)"
  exit 1
fi
